/**
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ApiTokenAuthApi", () => {
  let instance: api.ApiTokenAuthApi
  beforeEach(function() {
    instance = new api.ApiTokenAuthApi(config)
  });

  test("apiTokenAuthCreate", () => {
    const body: api.AuthToken = undefined
    return expect(instance.apiTokenAuthCreate(body, {})).resolves.toBe(null)
  })
})

describe("ArticlesApi", () => {
  let instance: api.ArticlesApi
  beforeEach(function() {
    instance = new api.ArticlesApi(config)
  });

  test("articlesCreate", () => {
    const body: api.Article = undefined
    return expect(instance.articlesCreate(body, {})).resolves.toBe(null)
  })
  test("articlesDelete", () => {
    const id: number = 56
    return expect(instance.articlesDelete(id, {})).resolves.toBe(null)
  })
  test("articlesList", () => {
    const page: number = 56
    return expect(instance.articlesList(page, {})).resolves.toBe(null)
  })
  test("articlesPartialUpdate", () => {
    const body: api.Article = undefined
    const id: number = 56
    return expect(instance.articlesPartialUpdate(body, id, {})).resolves.toBe(null)
  })
  test("articlesRead", () => {
    const id: number = 56
    return expect(instance.articlesRead(id, {})).resolves.toBe(null)
  })
  test("articlesUpdate", () => {
    const body: api.Article = undefined
    const id: number = 56
    return expect(instance.articlesUpdate(body, id, {})).resolves.toBe(null)
  })
})

describe("GroupsApi", () => {
  let instance: api.GroupsApi
  beforeEach(function() {
    instance = new api.GroupsApi(config)
  });

  test("groupsCreate", () => {
    const body: api.Group = undefined
    return expect(instance.groupsCreate(body, {})).resolves.toBe(null)
  })
  test("groupsDelete", () => {
    const id: number = 56
    return expect(instance.groupsDelete(id, {})).resolves.toBe(null)
  })
  test("groupsList", () => {
    const page: number = 56
    return expect(instance.groupsList(page, {})).resolves.toBe(null)
  })
  test("groupsPartialUpdate", () => {
    const body: api.Group = undefined
    const id: number = 56
    return expect(instance.groupsPartialUpdate(body, id, {})).resolves.toBe(null)
  })
  test("groupsRead", () => {
    const id: number = 56
    return expect(instance.groupsRead(id, {})).resolves.toBe(null)
  })
  test("groupsUpdate", () => {
    const body: api.Group = undefined
    const id: number = 56
    return expect(instance.groupsUpdate(body, id, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("usersCreate", () => {
    const body: api.User = undefined
    return expect(instance.usersCreate(body, {})).resolves.toBe(null)
  })
  test("usersDelete", () => {
    const id: number = 56
    return expect(instance.usersDelete(id, {})).resolves.toBe(null)
  })
  test("usersList", () => {
    const page: number = 56
    return expect(instance.usersList(page, {})).resolves.toBe(null)
  })
  test("usersPartialUpdate", () => {
    const body: api.User = undefined
    const id: number = 56
    return expect(instance.usersPartialUpdate(body, id, {})).resolves.toBe(null)
  })
  test("usersRead", () => {
    const id: number = 56
    return expect(instance.usersRead(id, {})).resolves.toBe(null)
  })
  test("usersUpdate", () => {
    const body: api.User = undefined
    const id: number = 56
    return expect(instance.usersUpdate(body, id, {})).resolves.toBe(null)
  })
})

