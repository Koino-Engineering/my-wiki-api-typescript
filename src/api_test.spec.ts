/**
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ApiApi", () => {
  let instance: api.ApiApi
  beforeEach(function() {
    instance = new api.ApiApi(config)
  });

  test("apiArticlesCreate", () => {
    const body: api.Article = undefined
    return expect(instance.apiArticlesCreate(body, {})).resolves.toBe(null)
  })
  test("apiArticlesDelete", () => {
    const id: number = 56
    return expect(instance.apiArticlesDelete(id, {})).resolves.toBe(null)
  })
  test("apiArticlesList", () => {
    const page: number = 56
    return expect(instance.apiArticlesList(page, {})).resolves.toBe(null)
  })
  test("apiArticlesPartialUpdate", () => {
    const body: api.Article = undefined
    const id: number = 56
    return expect(instance.apiArticlesPartialUpdate(body, id, {})).resolves.toBe(null)
  })
  test("apiArticlesRead", () => {
    const id: number = 56
    return expect(instance.apiArticlesRead(id, {})).resolves.toBe(null)
  })
  test("apiArticlesUpdate", () => {
    const body: api.Article = undefined
    const id: number = 56
    return expect(instance.apiArticlesUpdate(body, id, {})).resolves.toBe(null)
  })
  test("apiGroupsCreate", () => {
    const body: api.Group = undefined
    return expect(instance.apiGroupsCreate(body, {})).resolves.toBe(null)
  })
  test("apiGroupsDelete", () => {
    const id: number = 56
    return expect(instance.apiGroupsDelete(id, {})).resolves.toBe(null)
  })
  test("apiGroupsList", () => {
    const page: number = 56
    return expect(instance.apiGroupsList(page, {})).resolves.toBe(null)
  })
  test("apiGroupsPartialUpdate", () => {
    const body: api.Group = undefined
    const id: number = 56
    return expect(instance.apiGroupsPartialUpdate(body, id, {})).resolves.toBe(null)
  })
  test("apiGroupsRead", () => {
    const id: number = 56
    return expect(instance.apiGroupsRead(id, {})).resolves.toBe(null)
  })
  test("apiGroupsUpdate", () => {
    const body: api.Group = undefined
    const id: number = 56
    return expect(instance.apiGroupsUpdate(body, id, {})).resolves.toBe(null)
  })
  test("apiUsersCreate", () => {
    const body: api.User = undefined
    return expect(instance.apiUsersCreate(body, {})).resolves.toBe(null)
  })
  test("apiUsersDelete", () => {
    const id: number = 56
    return expect(instance.apiUsersDelete(id, {})).resolves.toBe(null)
  })
  test("apiUsersList", () => {
    const page: number = 56
    return expect(instance.apiUsersList(page, {})).resolves.toBe(null)
  })
  test("apiUsersPartialUpdate", () => {
    const body: api.User = undefined
    const id: number = 56
    return expect(instance.apiUsersPartialUpdate(body, id, {})).resolves.toBe(null)
  })
  test("apiUsersRead", () => {
    const id: number = 56
    return expect(instance.apiUsersRead(id, {})).resolves.toBe(null)
  })
  test("apiUsersUpdate", () => {
    const body: api.User = undefined
    const id: number = 56
    return expect(instance.apiUsersUpdate(body, id, {})).resolves.toBe(null)
  })
})

describe("ApiTokenAuthApi", () => {
  let instance: api.ApiTokenAuthApi
  beforeEach(function() {
    instance = new api.ApiTokenAuthApi(config)
  });

  test("apiTokenAuthCreate", () => {
    const body: api.AuthToken = undefined
    return expect(instance.apiTokenAuthCreate(body, {})).resolves.toBe(null)
  })
})

